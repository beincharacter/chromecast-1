name: CI, CD, CT for chromecast

env:
  SONAR_PROJECT_KEY: chromecast-qa
  ENVIRONMENT: qa
  SERVICE_CODE: messageboards
  ARTIFACT_RETENTION_DAYS: 10
  CODE_PATH: /home/runner/work/chromecast-node/chromecast-node
  DEPLOYMENT_PLATFORM: do


# Events
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Workflow defination
jobs:

  build:
    name: Build
    runs-on: ubuntu-latest         
    outputs:
      deploymentPlatform: ${{ steps.init.outputs.deploymentPlatform }}
    
    steps:        
      - name: Environment variables to output 
        id: init
        run: |
          echo "deploymentPlatform=${{ env.DEPLOYMENT_PLATFORM }}" >> $GITHUB_OUTPUT

        
  RUN_ON_AWS:
  
    name: RUN_ON_AWS
    needs: build
    runs-on: ubuntu-latest
      
    if: needs.build.outputs.deploymentPlatform == 'aws'
    
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Unshallow the checkout
        run: |
          git fetch --prune --unshallow --tags
          git tag --list
      - name: Install dependencies
        run: npm i

      #- name: Building the code
      #  run: npm run build
      
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.19.15' # default is latest stable  

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_EKS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEV_EKS_SECRET_KEY }}
          aws-region: ${{ secrets.DEV_EKS_AWS_REGION }}
          
      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.DEV_EKS_KUBE_CONFIG }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker Build, tag, push image to Amazon ECR, and deploy in EKS using kubernetes
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ENVIRONMENT }}
          IMAGE_TAG: ${{ env.SERVICE_CODE }}-${{ github.sha }}
        run: |
          # Build a docker container and
          # steps.version.outputs.version
          # push it to ECR so that it can
          # be deployed to ECS
          ls -lrtha
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} -f docker/Dockerfile .
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          # replacing image tag and registry inside deployment file
          sed -i'' -e "s/REG/$ECR_REGISTRY/g" -e "s/IMAGE/$ECR_REPOSITORY/g" -e "s/TAG/$IMAGE_TAG/g" kubernetes-files/deployment.yaml
          kubectl apply -f kubernetes-files/deployment.yaml
          kubectl apply -f kubernetes-files/istio-rules.yaml
      - name: Check pods after apply
        run: kubectl get pods

  RUN_ON_DO:
  
    name: RUN_ON_DO
    needs: build
    runs-on: ubuntu-latest
    
    if: needs.build.outputs.deploymentPlatform == 'do'

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Unshallow the checkout
        run: |
          git fetch --prune --unshallow --tags
          git tag --list
#       - name: Install dependencies
#         run: npm i

      #- name: Building the code
      #  run: npm run build
      
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.19.15' # default is latest stable  

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}       
    
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 mobius-eks          

      - name: Docker Build, tag, push image to Amazon ECR, and deploy in EKS using kubernetes
        id: build-image
        env:
          ECR_REGISTRY: registry.digitalocean.com/mobius-qa
          ECR_REPOSITORY: ${{ env.ENVIRONMENT }}
          IMAGE_TAG: ${{ env.SERVICE_CODE }}-${{ github.sha }}
          C_HOST: ${{ env.CONSUL_HOST }}
          C_PORT: ${{ env.CONSUL_PORT }}
          APM_URL: ${{ env.APM_URL }}
        run: |
          # Build a docker container and
          # steps.version.outputs.version
          # push it to ECR so that it can
          # be deployed to ECS
          ls -lrtha
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} -f docker/Dockerfile .
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          # replacing image tag and registry inside deployment file
          sed -i'' -e "s|REG|$ECR_REGISTRY|g" -e "s|IMAGE|$ECR_REPOSITORY|g" -e "s|TAG|$IMAGE_TAG|g" kubernetes-files/deployment.yaml
          kubectl apply -f kubernetes-files/deployment.yaml
          kubectl apply -f kubernetes-files/istio-rules.yaml
      - name: Check pods after apply
        run: kubectl get pods

